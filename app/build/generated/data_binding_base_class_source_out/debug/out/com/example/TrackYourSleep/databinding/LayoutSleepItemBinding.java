// Generated by view binder compiler. Do not edit!
package com.example.TrackYourSleep.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.RatingBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.TrackYourSleep.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutSleepItemBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final ConstraintLayout cardRelativeLayout;

  @NonNull
  public final ImageView sleepDeleteLeft;

  @NonNull
  public final ImageView sleepDeleteRight;

  @NonNull
  public final TextView sleepItemDuration;

  @NonNull
  public final RatingBar sleepItemRating;

  @NonNull
  public final TextView sleepItemStart;

  @NonNull
  public final TextView sleepItemStop;

  @NonNull
  public final CardView sleepSwipeable;

  @NonNull
  public final TextView sleepTimeHeader;

  @NonNull
  public final ImageView sleepTimeImage;

  @NonNull
  public final ImageView startImage;

  @NonNull
  public final TextView startedOnHeader;

  @NonNull
  public final ImageView stopRedImage;

  @NonNull
  public final TextView stoppedOnHeader;

  @NonNull
  public final TextView wakeItemDuration;

  @NonNull
  public final TextView wakeTimeHeader;

  @NonNull
  public final ImageView wakeTimeImage;

  private LayoutSleepItemBinding(@NonNull FrameLayout rootView,
      @NonNull ConstraintLayout cardRelativeLayout, @NonNull ImageView sleepDeleteLeft,
      @NonNull ImageView sleepDeleteRight, @NonNull TextView sleepItemDuration,
      @NonNull RatingBar sleepItemRating, @NonNull TextView sleepItemStart,
      @NonNull TextView sleepItemStop, @NonNull CardView sleepSwipeable,
      @NonNull TextView sleepTimeHeader, @NonNull ImageView sleepTimeImage,
      @NonNull ImageView startImage, @NonNull TextView startedOnHeader,
      @NonNull ImageView stopRedImage, @NonNull TextView stoppedOnHeader,
      @NonNull TextView wakeItemDuration, @NonNull TextView wakeTimeHeader,
      @NonNull ImageView wakeTimeImage) {
    this.rootView = rootView;
    this.cardRelativeLayout = cardRelativeLayout;
    this.sleepDeleteLeft = sleepDeleteLeft;
    this.sleepDeleteRight = sleepDeleteRight;
    this.sleepItemDuration = sleepItemDuration;
    this.sleepItemRating = sleepItemRating;
    this.sleepItemStart = sleepItemStart;
    this.sleepItemStop = sleepItemStop;
    this.sleepSwipeable = sleepSwipeable;
    this.sleepTimeHeader = sleepTimeHeader;
    this.sleepTimeImage = sleepTimeImage;
    this.startImage = startImage;
    this.startedOnHeader = startedOnHeader;
    this.stopRedImage = stopRedImage;
    this.stoppedOnHeader = stoppedOnHeader;
    this.wakeItemDuration = wakeItemDuration;
    this.wakeTimeHeader = wakeTimeHeader;
    this.wakeTimeImage = wakeTimeImage;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutSleepItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutSleepItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_sleep_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutSleepItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.card_relative_layout;
      ConstraintLayout cardRelativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (cardRelativeLayout == null) {
        break missingId;
      }

      id = R.id.sleep_delete_left;
      ImageView sleepDeleteLeft = ViewBindings.findChildViewById(rootView, id);
      if (sleepDeleteLeft == null) {
        break missingId;
      }

      id = R.id.sleep_delete_right;
      ImageView sleepDeleteRight = ViewBindings.findChildViewById(rootView, id);
      if (sleepDeleteRight == null) {
        break missingId;
      }

      id = R.id.sleep_item_duration;
      TextView sleepItemDuration = ViewBindings.findChildViewById(rootView, id);
      if (sleepItemDuration == null) {
        break missingId;
      }

      id = R.id.sleep_item_rating;
      RatingBar sleepItemRating = ViewBindings.findChildViewById(rootView, id);
      if (sleepItemRating == null) {
        break missingId;
      }

      id = R.id.sleep_item_start;
      TextView sleepItemStart = ViewBindings.findChildViewById(rootView, id);
      if (sleepItemStart == null) {
        break missingId;
      }

      id = R.id.sleep_item_stop;
      TextView sleepItemStop = ViewBindings.findChildViewById(rootView, id);
      if (sleepItemStop == null) {
        break missingId;
      }

      id = R.id.sleep_swipeable;
      CardView sleepSwipeable = ViewBindings.findChildViewById(rootView, id);
      if (sleepSwipeable == null) {
        break missingId;
      }

      id = R.id.sleep_time_header;
      TextView sleepTimeHeader = ViewBindings.findChildViewById(rootView, id);
      if (sleepTimeHeader == null) {
        break missingId;
      }

      id = R.id.sleep_time_image;
      ImageView sleepTimeImage = ViewBindings.findChildViewById(rootView, id);
      if (sleepTimeImage == null) {
        break missingId;
      }

      id = R.id.start_image;
      ImageView startImage = ViewBindings.findChildViewById(rootView, id);
      if (startImage == null) {
        break missingId;
      }

      id = R.id.started_on_header;
      TextView startedOnHeader = ViewBindings.findChildViewById(rootView, id);
      if (startedOnHeader == null) {
        break missingId;
      }

      id = R.id.stop_red_image;
      ImageView stopRedImage = ViewBindings.findChildViewById(rootView, id);
      if (stopRedImage == null) {
        break missingId;
      }

      id = R.id.stopped_on_header;
      TextView stoppedOnHeader = ViewBindings.findChildViewById(rootView, id);
      if (stoppedOnHeader == null) {
        break missingId;
      }

      id = R.id.wake_item_duration;
      TextView wakeItemDuration = ViewBindings.findChildViewById(rootView, id);
      if (wakeItemDuration == null) {
        break missingId;
      }

      id = R.id.wake_time_header;
      TextView wakeTimeHeader = ViewBindings.findChildViewById(rootView, id);
      if (wakeTimeHeader == null) {
        break missingId;
      }

      id = R.id.wake_time_image;
      ImageView wakeTimeImage = ViewBindings.findChildViewById(rootView, id);
      if (wakeTimeImage == null) {
        break missingId;
      }

      return new LayoutSleepItemBinding((FrameLayout) rootView, cardRelativeLayout, sleepDeleteLeft,
          sleepDeleteRight, sleepItemDuration, sleepItemRating, sleepItemStart, sleepItemStop,
          sleepSwipeable, sleepTimeHeader, sleepTimeImage, startImage, startedOnHeader,
          stopRedImage, stoppedOnHeader, wakeItemDuration, wakeTimeHeader, wakeTimeImage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
